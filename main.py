import asyncio
import re
from datetime import datetime, time, timedelta
from typing import Callable

from aiogram import BaseMiddleware, Bot, Dispatcher
from aiogram.filters import Command, BaseFilter
from aiogram.types import Message, TelegramObject
from bestconfig import Config
from gspread import Worksheet

from gsheet import GSheetConnector, sheet2pandas


class ChatFilter(BaseFilter):
    def __init__(self, chat_id: str | int):
        self.chat_id = chat_id

    async def __call__(self, message: Message) -> bool:
        return message.chat.id == self.chat_id


class GSheetMiddleware(BaseMiddleware):
    def __init__(self, fabric: GSheetConnector, table_id: str):
        self.fabric = fabric
        self.table_id = table_id

    async def __call__(self, handler: Callable, event: TelegramObject, data: dict):
        data["user_table"] = self.fabric.get_sheet(self.table_id).sheet1
        await handler(event, data)


config = Config()

bot = Bot(config.token)
dp = Dispatcher()
connector = GSheetConnector()
dp.message.middleware(GSheetMiddleware(connector, table_id=config.table_id))

CHAT_FILTER = ChatFilter(config.chat_id)


@dp.message(Command("me"), CHAT_FILTER)
async def about_me(message: Message, user_table: Worksheet):
    # –ï—Å–ª–∏ –≤—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    table, first_line = sheet2pandas(user_table)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_index = table[
        table["Telegram"].str.strip().str.lower()
        == f"@{message.from_user.username.lower()}"
    ].index[0]

    column_index = table.columns.tolist().index(datetime.now().strftime("%d.%m.%Y")) + 1
    result = table.iloc[user_index, column_index - 1]

    # –ï—Å–ª–∏ –ø—Ä–æ—Å–ø–∞–ª
    if '1' in result:
        await message.answer(f"{message.from_user.first_name}, —Ç—ã —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—Å–ø–∞–ª üò¢")
    # –ï—Å–ª–∏ –≤—Å—Ç–∞–ª –≤–æ–≤—Ä–µ–º—è
    elif '0' in result:
        await message.answer(f"{message.from_user.first_name}, —Ç—ã —Å–µ–≥–æ–¥–Ω—è –≤—Å—Ç–∞–ª –≤–æ–≤—Ä–µ–º—è ‚òÄÔ∏è")
    # –ï—Å–ª–∏ –Ω–µ –ø—Ä–∏—Å–ª–∞–ª –∫—Ä—É–∂–æ–∫
    else:
        await message.answer(f"{message.from_user.first_name}, —Ç—ã —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–ª –∫—Ä—É–∂–æ—á–µ–∫ üëÄ")

@dp.message(Command("help"), CHAT_FILTER)
async def help(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–≤–æ–∏ –ø–æ–¥—ä–µ–º—ã –≤ —Ç–∞–±–ª–∏—Ü—É")


@dp.message(CHAT_FILTER)
async def circle_heandler(message: Message, user_table: Worksheet):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏—à–µ–¥—à–∏–π –∫—Ä—É–∂–æ—á–µ–∫
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ —É—Ç—Ä–∞
    message_time = (message.date + timedelta(hours=3)).time()
    if not (time(4) < message_time < time(10)):
        return

    # –ï—Å–ª–∏ –≤—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    table, first_line = sheet2pandas(user_table)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_index = table[
        table["Telegram"].str.strip().str.lower()
        == f"@{message.from_user.username.lower()}"
    ].index[0]
    user = table.loc[user_index].to_dict()
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if not user:
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—Å—ã–ø–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ë–µ—Ä–µ—Ç—Å—è —Å–∞–º–æ–µ –ø–æ–∑–¥–Ω–µ–µ –µ–≥–æ –≤—Ä–µ–º—è
    wakeup_time = user["–í—Ä–µ–º—è –ø–æ–¥—ä–µ–º–∞ (–º—Å–∫)"]
    wakeup_time = re.findall(r"\d+(?:[:\.]\d+)?", wakeup_time.replace(" ", ""))
    wakeup_time = time(*map(int, (re.findall(r"\d+", wakeup_time[-1]))))

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏
    row_index = user_index + first_line + 2
    column_index = table.columns.tolist().index(datetime.now().strftime("%d.%m.%Y")) + 1
    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π, –∑–Ω–∞—á–∏—Ç —á–µ–ª–µ–Ω–¥–∂ –Ω–µ –∏–¥–µ—Ç
    if column_index == 0:
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–Ω—É–ª—Å—è –≤–æ–≤—Ä–µ–º—è, —Å—Ç–∞–≤–∏–º –≤ —Ç–∞–±–ª–∏—Ü–µ –∑–Ω–∞—á–µ–Ω–∏–µ 0
    # –ê –µ—Å–ª–∏ –ø—Ä–æ—Å–ø–∞–ª - -1000
    if message_time > wakeup_time:
        await message.answer(
            f"–¢—ã –ø—Ä–æ—Å–ø–∞–ª –≤—Ä–µ–º—è —Å–≤–æ–µ–≥–æ –ø–æ–¥—ä–µ–º–∞ ({wakeup_time.strftime('%H:%M').lstrip('0')}) üò¢"
        )
        user_table.update_cell(row_index, column_index, -1000)
    else:
        await message.answer("–° –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º ‚òÄÔ∏è")
        user_table.update_cell(row_index, column_index, 0)


asyncio.run(dp.start_polling(bot))
